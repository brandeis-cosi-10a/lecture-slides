- functional decomposition
- writing code using pre-existing functions/code
- debugging existing code
- effective comments
- using reference docs
- data structures - appropriate choice of structures

On the fence:
- translating written requirements to code
- working with larger programs?

PS0: 
- Using repl.it, running tests

PS1:
- variables - proper usage, naming
- datatypes - proper usage of basic types, type conversions
- string escaping
- expressions - evaluation, construction
- input()
- conditionals - if/elif/else
- conditionals - choosing the correct structure & comparisons
- debugging existing code
- using reference docs

PS2: 
- functions - invocation
- functions - definition
- functions - using parameters 
- loops - for/range
- loops - while
- loops - nested
- loops - choosing the correct loop type
- unit tests

PS3:
- lists - initialization, modification
- lists - iteration
- lists - working with nested lists
- advanced string manipulation
- tuples - appropriate usage?
- references - use list references appropriately

PS4:
- dictionaries - initialization, modification
- dictionaries - iteration
- sets - appropriate usage?

PS5:
- file i/o - read/write files, split
- classes - definition
- classes - use

PS6:
- functors - pass to std/given functions
- functors - define functions that use them
- lists - comprehensions, filtering
- lists - comprehensions, mapping
- dictionaries - comprehensions, filtering
- dictionaries - comprehensions, mapping

PS7??:
- file i/o - read/write csv
- file i/o - read/write json?
- async/await? (probably drop)

regular expressions?